{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Setup","metadata":{}},{"cell_type":"code","source":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport sklearn\n\nprint(sklearn.__version__)\n\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\nimport pickle\n\nnp.random.seed(42)\n\n\nplt.rc('font', size=14)\nplt.rc('axes', labelsize=14, titlesize=14)\nplt.rc('legend', fontsize=14)\nplt.rc('xtick', labelsize=10)\nplt.rc('ytick', labelsize=10)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:35:04.619119Z","iopub.execute_input":"2024-11-23T13:35:04.620247Z","iopub.status.idle":"2024-11-23T13:35:07.646470Z","shell.execute_reply.started":"2024-11-23T13:35:04.620182Z","shell.execute_reply":"2024-11-23T13:35:07.645151Z"}},"outputs":[{"name":"stdout","text":"1.2.2\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:35:07.648779Z","iopub.execute_input":"2024-11-23T13:35:07.649419Z","iopub.status.idle":"2024-11-23T13:35:07.794338Z","shell.execute_reply.started":"2024-11-23T13:35:07.649371Z","shell.execute_reply":"2024-11-23T13:35:07.793101Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"from pathlib import Path\n\nIMAGES_PATH = Path() / \"images\" / \"classification\"\nIMAGES_PATH.mkdir(parents=True, exist_ok=True)\n\ndef save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n    path = IMAGES_PATH / f\"{fig_id}.{fig_extension}\"\n    if tight_layout:\n        plt.tight_layout()\n    plt.savefig(path, format=fig_extension, dpi=resolution)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:35:07.795623Z","iopub.execute_input":"2024-11-23T13:35:07.796096Z","iopub.status.idle":"2024-11-23T13:35:07.803294Z","shell.execute_reply.started":"2024-11-23T13:35:07.796058Z","shell.execute_reply":"2024-11-23T13:35:07.802234Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split , GridSearchCV\nfrom sklearn.metrics import precision_score, recall_score , accuracy_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:35:07.805851Z","iopub.execute_input":"2024-11-23T13:35:07.806349Z","iopub.status.idle":"2024-11-23T13:35:07.819253Z","shell.execute_reply.started":"2024-11-23T13:35:07.806315Z","shell.execute_reply":"2024-11-23T13:35:07.818034Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"from sklearn.datasets import fetch_openml ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:35:07.820625Z","iopub.execute_input":"2024-11-23T13:35:07.821043Z","iopub.status.idle":"2024-11-23T13:35:07.941287Z","shell.execute_reply.started":"2024-11-23T13:35:07.821010Z","shell.execute_reply":"2024-11-23T13:35:07.940080Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"mnist = fetch_openml(data_id = 554,as_frame= False)\n\nX = mnist.data\ny = mnist.target\n\nX_train, X_test,y_train, y_test = train_test_split(X,y,test_size =1/7 )\n\nprint(f'X_train: {X_train.shape}')\nprint(f'X_test : {X_test.shape}')\nprint(f'y_train: {y_train.shape}')\nprint(f'y_test : {y_test.shape}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:35:07.942479Z","iopub.execute_input":"2024-11-23T13:35:07.942796Z","iopub.status.idle":"2024-11-23T13:35:37.099019Z","shell.execute_reply.started":"2024-11-23T13:35:07.942740Z","shell.execute_reply":"2024-11-23T13:35:37.097732Z"}},"outputs":[{"name":"stdout","text":"X_train: (60000, 784)\nX_test : (10000, 784)\ny_train: (60000,)\ny_test : (10000,)\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"# Problem Statement\r\nExercise: Write a function that can shift an MNIST image in any direction (left, right, up, or down) by one pixel. You can use the shift() function from the scipy.ndimage module. For example, shift(image, [2, 1], cval=0) shifts the image two pixels down and one pixel to the right. Then, for each image in the training set, create four shifted copies (one per direction) and add them to the training set. Finally, train your best model on this expanded training set and measure its accuracy on the test set. You should observe that your model performs even better now! This technique of artificially growing the training set is called _data augmentation or training set expansion._\r\n\r\nLet's try augmenting the MNIST dataset by adding slightly shifted versions of each image.","metadata":{}},{"cell_type":"code","source":"from scipy.ndimage import shift \nimport random","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:35:37.100440Z","iopub.execute_input":"2024-11-23T13:35:37.100915Z","iopub.status.idle":"2024-11-23T13:35:37.106289Z","shell.execute_reply.started":"2024-11-23T13:35:37.100854Z","shell.execute_reply":"2024-11-23T13:35:37.104837Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"?shift","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:35:37.400989Z","iopub.execute_input":"2024-11-23T13:35:37.401327Z","iopub.status.idle":"2024-11-23T13:35:37.460350Z","shell.execute_reply.started":"2024-11-23T13:35:37.401296Z","shell.execute_reply":"2024-11-23T13:35:37.459326Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[0;31mSignature:\u001b[0m\n\u001b[0mshift\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mshift\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0moutput\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'constant'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mcval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m    \u001b[0mprefilter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n\u001b[0;34m\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;31mDocstring:\u001b[0m\nShift an array.\n\nThe array is shifted using spline interpolation of the requested order.\nPoints outside the boundaries of the input are filled according to the\ngiven mode.\n\nParameters\n----------\ninput : array_like\n    The input array.\nshift : float or sequence\n    The shift along the axes. If a float, `shift` is the same for each\n    axis. If a sequence, `shift` should contain one value for each axis.\noutput : array or dtype, optional\n    The array in which to place the output, or the dtype of the\n    returned array. By default an array of the same dtype as input\n    will be created.\norder : int, optional\n    The order of the spline interpolation, default is 3.\n    The order has to be in the range 0-5.\nmode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n    The `mode` parameter determines how the input array is extended\n    beyond its boundaries. Default is 'constant'. Behavior for each valid\n    value is as follows (see additional plots and details on\n    :ref:`boundary modes <ndimage-interpolation-modes>`):\n\n    'reflect' (`d c b a | a b c d | d c b a`)\n        The input is extended by reflecting about the edge of the last\n        pixel. This mode is also sometimes referred to as half-sample\n        symmetric.\n\n    'grid-mirror'\n        This is a synonym for 'reflect'.\n\n    'constant' (`k k k k | a b c d | k k k k`)\n        The input is extended by filling all values beyond the edge with\n        the same constant value, defined by the `cval` parameter. No\n        interpolation is performed beyond the edges of the input.\n\n    'grid-constant' (`k k k k | a b c d | k k k k`)\n        The input is extended by filling all values beyond the edge with\n        the same constant value, defined by the `cval` parameter. Interpolation\n        occurs for samples outside the input's extent  as well.\n\n    'nearest' (`a a a a | a b c d | d d d d`)\n        The input is extended by replicating the last pixel.\n\n    'mirror' (`d c b | a b c d | c b a`)\n        The input is extended by reflecting about the center of the last\n        pixel. This mode is also sometimes referred to as whole-sample\n        symmetric.\n\n    'grid-wrap' (`a b c d | a b c d | a b c d`)\n        The input is extended by wrapping around to the opposite edge.\n\n    'wrap' (`d b c d | a b c d | b c a b`)\n        The input is extended by wrapping around to the opposite edge, but in a\n        way such that the last point and initial point exactly overlap. In this\n        case it is not well defined which sample will be chosen at the point of\n        overlap.\ncval : scalar, optional\n    Value to fill past edges of input if `mode` is 'constant'. Default\n    is 0.0.\nprefilter : bool, optional\n    Determines if the input array is prefiltered with `spline_filter`\n    before interpolation. The default is True, which will create a\n    temporary `float64` array of filtered values if `order > 1`. If\n    setting this to False, the output will be slightly blurred if\n    `order > 1`, unless the input is prefiltered, i.e. it is the result\n    of calling `spline_filter` on the original input.\n\nReturns\n-------\nshift : ndarray\n    The shifted input.\n\nSee Also\n--------\naffine_transform : Affine transformations\n\nNotes\n-----\nFor complex-valued `input`, this function shifts the real and imaginary\ncomponents independently.\n\n.. versionadded:: 1.6.0\n    Complex-valued support added.\n\nExamples\n--------\nImport the necessary modules and an exemplary image.\n\n>>> from scipy.ndimage import shift\n>>> import matplotlib.pyplot as plt\n>>> from scipy import datasets\n>>> image = datasets.ascent()\n\nShift the image vertically by 20 pixels.\n\n>>> image_shifted_vertically = shift(image, (20, 0))\n\nShift the image vertically by -200 pixels and horizontally by 100 pixels.\n\n>>> image_shifted_both_directions = shift(image, (-200, 100))\n\nPlot the original and the shifted images.\n\n>>> fig, axes = plt.subplots(3, 1, figsize=(4, 12))\n>>> plt.gray()  # show the filtered result in grayscale\n>>> top, middle, bottom = axes\n>>> for ax in axes:\n...     ax.set_axis_off()  # remove coordinate system\n>>> top.imshow(image)\n>>> top.set_title(\"Original image\")\n>>> middle.imshow(image_shifted_vertically)\n>>> middle.set_title(\"Vertically shifted image\")\n>>> bottom.imshow(image_shifted_both_directions)\n>>> bottom.set_title(\"Image shifted in both directions\")\n>>> fig.tight_layout()\n\u001b[0;31mFile:\u001b[0m      /opt/conda/lib/python3.10/site-packages/scipy/ndimage/_interpolation.py\n\u001b[0;31mType:\u001b[0m      function"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"def shift_image(image, x, y):\n    image = image.reshape((28, 28))\n    shifted_image = shift(image, [y, x], cval=0, mode=\"constant\")\n    return shifted_image.reshape([-1])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:35:37.461873Z","iopub.execute_input":"2024-11-23T13:35:37.462865Z","iopub.status.idle":"2024-11-23T13:35:37.469361Z","shell.execute_reply.started":"2024-11-23T13:35:37.462815Z","shell.execute_reply":"2024-11-23T13:35:37.467894Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"\ndef shift_image(image, dy, dx):\n    image = image.reshape((28, 28))\n    shifted_image = shift(image, [dy, dx], cval=0, mode=\"constant\")\n    return shifted_image.reshape([-1])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:43:41.123834Z","iopub.execute_input":"2024-11-23T13:43:41.124286Z","iopub.status.idle":"2024-11-23T13:43:41.131021Z","shell.execute_reply.started":"2024-11-23T13:43:41.124250Z","shell.execute_reply":"2024-11-23T13:43:41.129609Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"image = X[465]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:38:04.723081Z","iopub.execute_input":"2024-11-23T13:38:04.724157Z","iopub.status.idle":"2024-11-23T13:38:04.729354Z","shell.execute_reply.started":"2024-11-23T13:38:04.724098Z","shell.execute_reply":"2024-11-23T13:38:04.728149Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"plt.figure(figsize=(24,3))\nplt.subplot(131)\nplt.title('original')\nplt.imshow(image.reshape(28,28),cmap='binary')\nplt.subplot(132)\nplt.title(\"10 pixels down\")\nplt.imshow(shift_image(image,10,0).reshape(28,28),cmap='binary')\nplt.subplot(133)\nplt.title('5 pixels right and up each')\nplt.imshow(shift_image(image,-5,5).reshape(28,28),cmap='binary')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:44:27.483939Z","iopub.execute_input":"2024-11-23T13:44:27.484362Z","iopub.status.idle":"2024-11-23T13:44:28.031718Z","shell.execute_reply.started":"2024-11-23T13:44:27.484322Z","shell.execute_reply":"2024-11-23T13:44:28.030472Z"}},"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"<matplotlib.image.AxesImage at 0x7b9854106fb0>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 2400x300 with 3 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAABkIAAAEqCAYAAABJMUwoAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABJy0lEQVR4nO3de1hVZfr/8c9WBEEB84SgiNZ4mEnUMkQlj5loJ51MU6fGyMaZSSvTatTRPM5QaqaZh+mkg42nyjTt+1VHQ0xHPKWWlZRn84DZJAgqojy/P/qxv+6AtdnuTcDy/bqufV2y7mc9z72XoDfr3msthzHGCAAAAAAAAAAAwIYqlHYCAAAAAAAAAAAAJYVGCAAAAAAAAAAAsC0aIQAAAAAAAAAAwLZohAAAAAAAAAAAANuiEQIAAAAAAAAAAGyLRggAAAAAAAAAALAtGiEAAAAAAAAAAMC2aIQAAAAAAAAAAADbohECAAAAAAAAAABsi0YI3HI4HOrUqZNXcxw5ckQOh0OPPfaYT3IqrvHjx8vhcGjjxo2/6LoAAAB20qBBAzVo0OAXW680arjHHntMDodDR44c+cXWBAAA9uSLc2meKK06xlfr/tK1ZmngHKXnfH3MaIQAAAAApeDdd9/VH//4R91xxx0KCAiQw+HQggULLPfJzMzU8OHDFRUVpYCAADVo0EDPP/+8srKyfpmkAQAAyokGDRrI4XAU+volmxTwPT7AguvhV9oJoOz7+uuvFRQU5NUcdevW1ddff63Q0FAfZQUAAFC+jRkzRkePHlXNmjUVHh6uo0ePWo7Pzs5Wx44dtWfPHnXr1k39+/fX7t27NW3aNKWkpGjTpk2qXLlyieS6YcOGEpkXAACgJIWGhmrYsGEFtpf01Qe+OJdWHiQmJmrkyJGqW7duaacCuEUjBG41bdrU6zkqVarkk3kAAADs4q233lKjRo0UFRWll156SaNGjbIcP2XKFO3Zs0d/+ctf9NJLLzm3jxw5Ui+//LJeffVVt3Ncr1tuuaVE5gUAAChJ1apV0/jx43/xdW+Uc2Dh4eEKDw8v7TSAYuHWWDY2f/58xcbGqmrVqqpatapiY2ML3G5h48aNcjgcGj9+vP7zn/+oW7duqlatmhwOh3NMUZcMHjlyRA8//LCqV6+uqlWrqmPHjtq0aVOh928r6hkhnTp1ksPhUG5ursaPH68GDRooICBAjRs31pw5cwqsefLkSY0bN05t2rRR7dq1nbeEePLJJ3XmzBlvDhcAAMAvqmvXroqKiirWWGOM3nrrLVWtWlVjx451iY0dO1ZVq1bVW2+9Vay5FixY4LwN18qVK9W6dWsFBQWpVq1aevzxx5Wenl5gn5/ft/mHH35QvXr1FBwcrAMHDriMLSp2+fJlTZ8+XbfffruqVKmi4OBgtW/fXh999FGx8pak5ORk9ejRQxEREQoICFBYWJjat2+vN954o9hzfPnll7rvvvsUHBys0NBQ3XPPPdq3b1+R469cuaLp06erRYsWCgwMVGhoqDp37qxVq1a5jNu7d68cDoeGDh3qsn3FihVyOBwKCAjQhQsXXGINGjRQw4YNnV9f+3ezbt06tWvXTkFBQapRo4YGDhyoH374odjvEwAA+Ma157nefvttRUdHq3Llyqpbt66effZZnT9/vsA+Pz+XduDAAQUHB6tevXoF/j8vKnb+/HmNGzdOt956qwIDA1WtWjXFx8dr8+bNxc79gw8+UMeOHVW7dm1VrlxZERER6tq1qz744INi7Z9fA547d05Dhw5VZGSk/Pz8nOcXi7pF1ZUrV5SYmKhbbrlFlStX1q9+9SslJibq0KFDls8QzsrK0jPPPOOs9Zo3b67333+/QE7//Oc/JUkNGzb06HZnu3bt0tChQ9WsWTOFhoYqMDBQ0dHReumll5Sbm1vk+y9OXvmOHz+u/v37Fzhf6gl3z1ou7P3mn2O9dOmSRo4cqfr166ty5cr69a9/rVmzZskY41EOn3/+ufr166fw8HD5+/srKipKTz31VKH16DvvvKOePXuqQYMGqly5sqpXr674+HglJycXOf+mTZvUq1cvhYWFKSAgQJGRkXrwwQeL/P5etGiRWrZsqcDAQIWHh+uZZ57RxYsXPXpPXBFiU08//bRmzZqlunXratCgQZJ++scvISFBu3fv1syZM13G/+c//9Hf//53de7cWYMHD9axY8cs5z9x4oTatWunU6dOqXv37rrtttuUlpamu+++W126dPE43/79+2v79u3q0aOHKlasqGXLlmnIkCGqVKmS/vCHPzjHbdq0Sa+88oruuusuxcbGqlKlStq9e7fmzp2rtWvX6rPPPuP2WwAAwHa+/fZbnTx5UvHx8apSpYpLrEqVKoqLi9PatWt1/PhxRUZGFmvODz74QGvXrtVDDz2krl27KjU1VfPnz9enn36q7du366abbipy3xo1aigpKUl33323BgwYoC1btqhSpUqSpEGDBunEiRNasGCBfvWrX0mScnJy1L17d23cuFEtW7bUoEGDlJubq48//lg9e/bUrFmzCjQQfu7jjz/W/fffr2rVqqlnz54KDw/X999/r71792rhwoUaPHiw2/e8b98+xcXFKSsrSw8++KAaNWqk7du3Ky4uTi1atCgw3hijhx56SCtXrlTjxo01ZMgQZWdna+nSpXrggQc0ffp0Pfvss5Kk5s2bq0aNGgV+4cv/+vLly9qyZYvuvvtuSdLhw4d19OhRJSQkFFj3o48+cr7fdu3aadOmTUpKStLBgwc9OvkBAMCNLicnRwsWLNDJkycVEhKimJgYxcbGXtdc06dP14YNG/Twww/r3nvv1fr16zVjxgylpqZq06ZNzlqoML/61a80a9YsJSQk6IknntCHH34oScrNzVX//v114cIFffTRR6pRo4Yk6b///a86dOigL7/8UnFxcfrTn/6kzMxMrVy5Up07d9Z7772nXr16WeY7d+5cPfnkkwoPD9dvf/tb1ahRQ6dPn9b27dv14Ycfqnfv3sV63zk5OerSpYuysrL0wAMPyM/PT2FhYZb7PP7441q4cKFuvvlmDRkyRDk5OXr11Ve1devWIvfJzc1Vt27d9OOPP6p37966cOGClixZor59+2rNmjXq1q2bJGnYsGFasGCB9u7dq2eeeUbVqlWTVLzbnb355ptatWqVOnTooHvuuUcXLlzQxo0bNWrUKO3YsaPQBlFx85KkU6dOqW3btjpx4oTi4+N1++236+uvv9bdd9+tzp07u83PF/r27avdu3c7/34/+OADPf300zpy5IheeeWVYs3x0UcfqW/fvqpQoYJ69uypyMhIffXVV3r99de1du1abdu2zeV3hSFDhqhFixbq2rWratWqpRMnTmjFihXq2rWrli9frp49e7rMP3PmTD377LMKDAzUb3/7W9WvX18nTpzQ5s2b9f777+vOO+90Gf/6669rzZo16tmzp7p06aI1a9botdde09mzZ/Wvf/2r+AfHwHZSUlKMJPPrX//anDt3zrn9v//9r2ncuLGRZDZt2mSMMSY5OdlIMpLMO++8U+h8kkzHjh1dtj3yyCNGkvnb3/7msv3tt992zpecnOzcfvjwYSPJDBw40GV8x44djSQTGxtrMjIynNv3799v/Pz8TJMmTVzGp6enm/PnzxfI8Z///KeRZCZPnuyyfdy4cQVyAQAAKGsSExONJDN//vxC46tXrzaSzNChQwuNDx061EgyGzZscLvW/PnznfXamjVrXGIjR44sdJ2oqCgTFRVVYK788S+88IIxxpjZs2cbSaZ///4u40aPHm0kmbFjx5q8vDzn9szMTHPHHXcYf39/c+LECef2wmq4Bx980Egye/bsKZDH2bNn3b5vY/6v9nz33Xddto8aNcp5TA4fPuzcnl9jduzY0eTk5Di3Hz161NSsWdP4+fmZgwcPFsjx9OnTzm3R0dGmffv2xt/f34waNcq5Pb9uTkpKcm7L/7vx8/Mzmzdvdm6/cuWK6dSpk5Fktm7dWqz3CgDAjS4qKsr5//u1r5iYGHPgwIFiz5Nfl/j7+5u9e/c6t+fl5ZkBAwYYSWbatGku+xR2Ls0YY/r162ckmTlz5hhjjHn++eeNJJcawRjjnPfNN9902Z6enm4iIyNNrVq1zMWLF53bBw4cWKCOuf32242/v79JT08vkEdxa6f8YxgfH28uXLhQIF7YuuvXrzeSTMuWLU12drZz+8mTJ01YWFih5wfz1+nZs6dLzZU/V3x8vNt1i+Po0aPmypUrLtvy8vLM448/biS51F/e5PXz85P/+Mc/Cj1fWpSizqPmK+z7K7/ObdKkicv54HPnzpkmTZoYh8NhduzY4Xbts2fPmpCQEFO3bl1z5MgRl9jixYsL/V3h0KFDBeY5efKkiYiIMI0aNXLZvmfPHlOhQgUTERFR4O8vLy+v0N8JQkNDzf79+53bL1y4YBo3bmwqVKjgMt4dbo1lQ/mXh40fP97l6oibbrpJ48aNk6QCt8i6/fbbC/00WmFycnL03nvvqXbt2hoxYoRLLCEhQU2aNPE458TERIWEhDi/btKkieLi4pSWluZyiWHt2rVVtWrVAvs/+uijCgkJ0fr16z1eGwAAoKzLyMiQpCKvfM2vo/LHFUfXrl0VHx/vsu2vf/2rqlWrpqSkJOXl5bmdY+LEiYqJidG0adM0a9YsPffcc2rQoIHmzZvnHJOXl6e5c+fqlltu0YQJE1xuwRocHKwXX3xRly9f1vLly4uVd2BgYIFt+Z+etHLs2DGlpKSoefPm+t3vfucSGz16tPPThNfKr6unTJkif39/5/b69evr2Wef1ZUrV1w+hZb/Sb/8q0DOnj2rffv26Z577lGbNm30ySefOMfmjynsNg4DBgxQXFyc8+uKFStq4MCBkqQdO3a4fa8AAOCnc1QbNmxQenq6srOztXv3bj366KPasWOH7rrrrkJvaWXl97//vZo3b+782uFw6O9//7sqVqxY4DxbUebNm6cGDRpoxIgRmjVrlqZNm6bWrVtr4sSJzjFnz57V0qVL1aVLFz3xxBMu+9euXVvPP/+8vv/++2KdA6tUqVKhV6oUp3a61pQpUwqtwQrz7rvvSpJefPFFlwfG59/OyMqrr77qUnPdddddioqK8ln9U79+fVWsWNFlm8Ph0JAhQySpyGNanLwuX76spUuXFnq+9IknnlCjRo188h7cGTt2rMvvDKGhoRozZoyMMc7a1kpSUpIyMzOVmJhY4Da+/fr10+23364lS5a4bL/2Vq/5wsPD1bt3b3377bc6evSoc/s//vEP5eXlafLkyQWu4nE4HIqIiCgw1zPPPONyvjkwMFD9+/dXXl6edu3a5fY95ePWWDa0e/duSYX/UpX/y9mePXtctsfExBR7/rS0NOXk5OiOO+5QQECAS8zhcKhdu3ZKS0vzKOdWrVoV2FavXj1J0rlz5xQcHOzcvnz5cv3jH//QZ599ph9//FFXr151xk6ePOnRugAAADeq9u3bF9hWtWpVtWzZUhs3btShQ4ect7YqSqVKlbR48WK1bNlSTz/9tCpWrKh//etfLh9wSUtL048//qiIiAhNmDChwBzff/+9JGn//v2Wa/Xr10/Lly9XmzZtNGDAAN11111q3769atasWZy3q71790pSgUvtJdf3fa3du3crKChIrVu3LrBPYXX1tY2Qfv36aePGjTLGqEuXLrp06ZL+9re/6fz58woODlZycrJuueWWQm9l5q42BgAA7uV/GDhfy5YtlZSUJElauHCh3nzzTQ0fPrzY8xVWO0VFRSkyMlJffvmlLl++7HKyvDChoaH617/+pQ4dOujpp59WcHCwFi1aJD+//ztFu2PHDl29elU5OTmFPuj922+/lfRT7XTfffcVuVa/fv30wgsvqFmzZhowYIA6d+6sO++806VOK47KlSsrOjq62OOtaq5rP+jxc9WqVSv0hHq9evUsb6nlicuXL+v111/XkiVLtH//fmVlZbk8O6Ow84rF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AI/mTEpK0ueff+782hij0aNH6+rVq3rsscfc7n/69GklJCTopptu0rvvvqsGDRrojTfe0JkzZzRw4EDnsyrq1Kmjvn376j//+Y+mTp3q8gyLfNu2bSv0/V0r/1ll18rNzXXe+shd7XS98mujiRMnunxo+fTp015fdZGvevXqkn6qyYor/xkVP/9QzJdffqnExESvcwoICFDfvn115swZvfLKKy6xt956S998802x5woJCVGTJk20efNml4bV+fPnNWrUKMt9J02a5HLVSEZGhiZPniyHw1Gs88EJCQkKDg7WX//610Jva3vhwgXnc0Skoo/rSy+9pH379hXY/09/+pMqVqyoMWPGuDxEXfrpZ6okn//MrbFsqEOHDnrqqac0a9YsNWvWTL1795YxRh988IG+++47Pf300+rQoYNXayQmJmr9+vUaOXKkUlJSdNtttyktLU2rV69W9+7dtWbNGre/PHuqQoUKevLJJ/XKK6+oRYsWuv/++5WZman//d//VVRUFL9IAgCAcuWtt95y/sLwxRdfOLflX2lw5513ujxD4oUXXtDKlSv18ssva/fu3br99tv12Wefad26dYqJidGwYcM8Wv++++7T/fffr4ceekgNGjRQamqq8wHeEydOdLv/M888o7S0NE2bNs356bI2bdpo3LhxGjt2rJ5//nnNmjVL0k8f0Pnss8/02muv6eOPP1aHDh1Uu3ZtnThxQl988YX27t2rrVu3FnlPZUl6+umndfLkSd15551q0KCBHA6HNm/erO3bt6tNmzaFPpDz52bPnq24uDj9/ve/14oVK9SoUSNt375dO3bsUPv27Qt8gu7RRx/V8uXLtXLlSjVv3lz33XefsrOztXTpUv33v//VK6+8UuDKmSZNmig8PFynTp1SjRo11Lx5c2esc+fOysvL0w8//KCHHnrIbb4AAOD6LFmyRNOnT1eHDh0UFRWlKlWq6JtvvtH//M//KDc3V6NGjfL43Fh8fLzatm2rfv36qVatWtqwYYN27typNm3auP2ArjFGv//97/X999/r/fffdz7o+aGHHtKgQYP09ttva/r06RoxYoQkac6cOUpLS9MLL7yghQsXqm3btqpWrZqOHz+unTt36ttvv9WpU6cUFBRU5Jq9evVSSEiI2rRpo6ioKOXm5urf//63vvrqKz300EPOE9i+1rVrVw0YMECL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"},"metadata":{}}],"execution_count":51},{"cell_type":"code","source":"\nimage = X_train[1000]  # some random digit to demo\nshifted_image_down = shift_image(tt, 0, 5)\n\ntype(shifted_image_down)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:35:38.932277Z","iopub.status.idle":"2024-11-23T13:35:38.933053Z","shell.execute_reply.started":"2024-11-23T13:35:38.932591Z","shell.execute_reply":"2024-11-23T13:35:38.932701Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Actually working on the problem\n\n-- we need to make 4 copies of each image and add it to the augumented set","metadata":{}},{"cell_type":"code","source":"X_train_aug = [x for x in X_train]\ny_train_aug = [x for x in y_train]\n\nfor y,x in ((-1,0),(1,0),(0,1),(0,-1)):\n    for img, label in zip(X_train,y_train):\n        X_train_aug.append(shift_image(img,y,x))\n        y_train_aug.append(label)\n\nX_train_aug = np.array(X_train_aug)\nY_train_aug = np.array(y_train_aug)\n\n\nprint(f'X_train_aug : {X_train_aug.shape}')\nprint(f'y_train_aug: {len(y_train_aug)}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:52:07.808061Z","iopub.execute_input":"2024-11-23T13:52:07.808467Z","iopub.status.idle":"2024-11-23T13:52:39.650833Z","shell.execute_reply.started":"2024-11-23T13:52:07.808418Z","shell.execute_reply":"2024-11-23T13:52:39.649786Z"}},"outputs":[{"name":"stdout","text":"X_train_aug : (300000, 784)\ny_train_aug: 300000\n","output_type":"stream"}],"execution_count":54},{"cell_type":"code","source":"# shuffling the indices \nshuffle= np.random.permutation(len(X_train_aug))\nX_train_aug_s = X_train_aug[shuffle]\ny_train_aug_s = y_train_aug[shuffle]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:58:00.230728Z","iopub.execute_input":"2024-11-23T13:58:00.231156Z","iopub.status.idle":"2024-11-23T13:58:00.881784Z","shell.execute_reply.started":"2024-11-23T13:58:00.231122Z","shell.execute_reply":"2024-11-23T13:58:00.880007Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[59], line 4\u001b[0m\n\u001b[1;32m      2\u001b[0m shuffle\u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mrandom\u001b[38;5;241m.\u001b[39mpermutation(\u001b[38;5;28mlen\u001b[39m(X_train_aug))\n\u001b[1;32m      3\u001b[0m X_train_aug_s \u001b[38;5;241m=\u001b[39m X_train_aug[shuffle]\n\u001b[0;32m----> 4\u001b[0m y_train_aug_s \u001b[38;5;241m=\u001b[39m \u001b[43my_train_aug\u001b[49m\u001b[43m[\u001b[49m\u001b[43mshuffle\u001b[49m\u001b[43m]\u001b[49m\n","\u001b[0;31mTypeError\u001b[0m: only integer scalar arrays can be converted to a scalar index"],"ename":"TypeError","evalue":"only integer scalar arrays can be converted to a scalar index","output_type":"error"}],"execution_count":59},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:59:03.699492Z","iopub.execute_input":"2024-11-23T13:59:03.700024Z","iopub.status.idle":"2024-11-23T13:59:03.705405Z","shell.execute_reply.started":"2024-11-23T13:59:03.699982Z","shell.execute_reply":"2024-11-23T13:59:03.704092Z"}},"outputs":[],"execution_count":61},{"cell_type":"code","source":"knn = KNeighborsClassifier(weights='distance',n_neighbors=4)\n\nknn.fit(X_train_aug,y_train_aug)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T13:59:56.636819Z","iopub.execute_input":"2024-11-23T13:59:56.637844Z","iopub.status.idle":"2024-11-23T14:01:20.299295Z","shell.execute_reply.started":"2024-11-23T13:59:56.637785Z","shell.execute_reply":"2024-11-23T14:01:20.298073Z"}},"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"0.1046"},"metadata":{}}],"execution_count":62},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T14:05:31.775081Z","iopub.execute_input":"2024-11-23T14:05:31.776119Z","iopub.status.idle":"2024-11-23T14:05:31.782773Z","shell.execute_reply.started":"2024-11-23T14:05:31.776063Z","shell.execute_reply":"2024-11-23T14:05:31.781216Z"}},"outputs":[],"execution_count":64},{"cell_type":"code","source":"accuracy_score(y_test,knn.predict(X_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-23T14:05:47.000449Z","iopub.execute_input":"2024-11-23T14:05:47.000902Z","iopub.status.idle":"2024-11-23T14:07:09.101394Z","shell.execute_reply.started":"2024-11-23T14:05:47.000864Z","shell.execute_reply":"2024-11-23T14:07:09.098917Z"}},"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"0.1046"},"metadata":{}}],"execution_count":65}]}